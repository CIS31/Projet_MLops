# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: airflow-config
#   labels:
#     app: airflow

# data:
#   AIRFLOW__CORE__EXECUTOR: LocalExecutor
#   AIRFLOW__CORE__LOAD_EXAMPLES: "false"
#   AIRFLOW__CORE__DEFAULT_TIMEZONE: CEST
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_HEADERS: "content-type, origin, authorization, accept"
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_METHODS: "GET, POST, OPTIONS, DELETE"
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_ORIGINS: "*"

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: airflow-webserver
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: airflow-webserver
#   template:
#     metadata:
#       labels:
#         app: airflow-webserver
#     spec:
#       containers:
#         - name: webserver
#           image: projet_mlops-airflow-webserver:latest
#           imagePullPolicy: Never # Change to Always for production
#           securityContext:
#             runAsUser: 50000
#             runAsGroup: 0          

#           command: ["airflow", "webserver"]
#           ports:
#             - containerPort: 8080
#           env:
#             - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
#               value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db # pass
#             - name: MINIO_HOST
#               value: minio
#             - name: MINIO_ROOT_USER
#               valueFrom:
#                 secretKeyRef:
#                   name: minio-secret
#                   key: MINIO_USER
#             - name: MINIO_ROOT_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: minio-secret
#                   key: MINIO_PASS
#           volumeMounts:
#             - name: dags
#               mountPath: /airflow/dags
#             - name: logs
#               mountPath: /airflow/logs
#             - name: plugins
#               mountPath: /airflow/plugins
#       volumes:
#         - name: dags
#           hostPath:
#             path: /airflow/dags
#         - name: logs
#           hostPath:
#             path: /airflow/logs
#         - name: plugins
#           hostPath:
#             path: /airflow/plugins

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: airflow-webserver
# spec:
#   selector:
#     app: airflow-webserver
#   ports:
#     - protocol: TCP
#       port: 8080
#       targetPort: 8080
#       nodePort: 30080
#   type: NodePort

# ----------------------
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: airflow-config
#   labels:
#     app: airflow
# data:
#   AIRFLOW__CORE__EXECUTOR: LocalExecutor
#   AIRFLOW__CORE__LOAD_EXAMPLES: "false"
#   AIRFLOW__CORE__DEFAULT_TIMEZONE: CEST
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_HEADERS: "content-type, origin, authorization, accept"
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_METHODS: "GET, POST, OPTIONS, DELETE"
#   AIRFLOW__API__ACCESS_CONTROL_ALLOW_ORIGINS: "*"
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: airflow-webserver
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: airflow-webserver
#   template:
#     metadata:
#       labels:
#         app: airflow-webserver
#     spec:
#       containers:
#         - name: webserver
#           image: projet_mlops-airflow-webserver:latest
#           imagePullPolicy: Never # change to Always si tu pushes sur Docker Hub
#           securityContext:
#             runAsUser: 50000
#             runAsGroup: 0
#           command: ["airflow", "webserver"]
#           ports:
#             - containerPort: 8080
#           env:
#             - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
#               value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db
#             - name: MINIO_HOST
#               value: minio
#             - name: MINIO_ROOT_USER
#               valueFrom:
#                 secretKeyRef:
#                   name: minio-secret
#                   key: MINIO_USER
#             - name: MINIO_ROOT_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: minio-secret
#                   key: MINIO_PASS
#           volumeMounts:
#             - name: dags
#               mountPath: /airflow/dags
#             - name: logs
#               mountPath: /airflow/logs
#             - name: plugins
#               mountPath: /airflow/plugins
#       volumes:
#         - name: dags
#           emptyDir: {}
#         - name: logs
#           emptyDir: {}
#         - name: plugins
#           emptyDir: {}
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: airflow-webserver
# spec:
#   selector:
#     app: airflow-webserver
#   ports:
#     - protocol: TCP
#       port: 8080
#       targetPort: 8080
#       nodePort: 30080
#   type: NodePort


---
# ConfigMap pour les variables d'environnement communes
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  labels:
    app: airflow

data:
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__DEFAULT_TIMEZONE: CEST
  AIRFLOW__API__ACCESS_CONTROL_ALLOW_HEADERS: "content-type, origin, authorization, accept"
  AIRFLOW__API__ACCESS_CONTROL_ALLOW_METHODS: "GET, POST, OPTIONS, DELETE"
  AIRFLOW__API__ACCESS_CONTROL_ALLOW_ORIGINS: "*"

---
# Init container pour initialiser la DB et cr√©er l'utilisateur
apiVersion: batch/v1
kind: Job
metadata:
  name: airflow-init
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: airflow-init
          image: projet_mlops-airflow-webserver:latest
          imagePullPolicy: Never
          env:
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db
            - name: _AIRFLOW_WWW_USER_CREATE
              value: "true"
            - name: _AIRFLOW_WWW_USER_USERNAME
              value: admin
            - name: _AIRFLOW_WWW_USER_PASSWORD
              value: admin
          command: ["/bin/bash", "-c"]
          args:
            - airflow db init && airflow users create --username admin --password admin --firstname admin --lastname admin --role Admin --email admin@example.com

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      containers:
        - name: scheduler
          image: projet_mlops-airflow-scheduler:latest
          imagePullPolicy: Never
          command: ["airflow", "scheduler"]
          env:
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_PASS
            - name: MINIO_ENDPOINT
              value: http://minio:30890
          
          envFrom:
            - configMapRef:
                name: airflow-config
      #     volumeMounts:
      #       - name: dags
      #         mountPath: /opt/airflow/dags
      # volumes:
      #   - name: dags
      #     hostPath:
      #       path: /mnt/d/Projet_MLOps/Projet_MLops/airflow/dags

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-triggerer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-triggerer
  template:
    metadata:
      labels:
        app: airflow-triggerer
    spec:
      containers:
        - name: triggerer
          image: projet_mlops-airflow-triggerer:latest
          imagePullPolicy: Never
          command: ["airflow", "triggerer"]
          env:
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_PASS
            - name: MINIO_ENDPOINT
              value: http://minio:30890
          
          envFrom:
            - configMapRef:
                name: airflow-config
      #     volumeMounts:
      #       - name: dags
      #         mountPath: /opt/airflow/dags

      # volumes:
      #   - name: dags
      #     hostPath:
      #       path: /mnt/d/Projet_MLOps/Projet_MLops/airflow/dags

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      containers:
        - name: webserver
          image: projet_mlops-airflow-webserver:latest
          imagePullPolicy: Never
          command: ["airflow", "webserver"]
          ports:
            - containerPort: 8080
          env:
            - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
              value: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow_db
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: MINIO_PASS
            - name: MINIO_ENDPOINT
              value: http://minio:30890
          
          envFrom:
            - configMapRef:
                name: airflow-config
      #     volumeMounts:
      #       - name: dags
      #         mountPath: /opt/airflow/dags
      # volumes:
      #   - name: dags
      #     hostPath:
      #       path: /mnt/d/Projet_MLOps/Projet_MLops/airflow/dags
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
spec:
  selector:
    app: airflow-webserver
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 8080
  type: NodePort

